// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAddr holds the string denoting the addr field in the database.
	FieldAddr = "addr"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldCareer holds the string denoting the career field in the database.
	FieldCareer = "career"
	// EdgeSent holds the string denoting the sent edge name in mutations.
	EdgeSent = "sent"
	// EdgeToken holds the string denoting the token edge name in mutations.
	EdgeToken = "token"
	// EdgeAdopted holds the string denoting the adopted edge name in mutations.
	EdgeAdopted = "adopted"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SentTable is the table that holds the sent relation/edge.
	SentTable = "pets"
	// SentInverseTable is the table name for the Pet entity.
	// It exists in this package in order to avoid circular dependency with the "pet" package.
	SentInverseTable = "pets"
	// SentColumn is the table column denoting the sent relation/edge.
	SentColumn = "user_sent"
	// TokenTable is the table that holds the token relation/edge.
	TokenTable = "tokens"
	// TokenInverseTable is the table name for the Token entity.
	// It exists in this package in order to avoid circular dependency with the "token" package.
	TokenInverseTable = "tokens"
	// TokenColumn is the table column denoting the token relation/edge.
	TokenColumn = "user_token"
	// AdoptedTable is the table that holds the adopted relation/edge.
	AdoptedTable = "pets"
	// AdoptedInverseTable is the table name for the Pet entity.
	// It exists in this package in order to avoid circular dependency with the "pet" package.
	AdoptedInverseTable = "pets"
	// AdoptedColumn is the table column denoting the adopted relation/edge.
	AdoptedColumn = "user_adopted"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldAge,
	FieldPhone,
	FieldEmail,
	FieldAddr,
	FieldAvatar,
	FieldCareer,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultCareer holds the default value on creation for the "career" field.
	DefaultCareer string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAddr orders the results by the addr field.
func ByAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddr, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCareer orders the results by the career field.
func ByCareer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCareer, opts...).ToFunc()
}

// BySentCount orders the results by sent count.
func BySentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentStep(), opts...)
	}
}

// BySent orders the results by sent terms.
func BySent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokenField orders the results by token field.
func ByTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenStep(), sql.OrderByField(field, opts...))
	}
}

// ByAdoptedCount orders the results by adopted count.
func ByAdoptedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdoptedStep(), opts...)
	}
}

// ByAdopted orders the results by adopted terms.
func ByAdopted(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdoptedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentTable, SentColumn),
	)
}
func newTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TokenTable, TokenColumn),
	)
}
func newAdoptedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdoptedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AdoptedTable, AdoptedColumn),
	)
}
